---
- name: Création namespace
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ app_name }}"
  become: yes

- name: Debug playbook location
  debug:
    var: playbook_dir

- name: Check if k3s.yaml exists
  stat:
    path: /etc/rancher/k3s/k3s.yaml
  register: k3s_yaml

- name: Display k3s.yaml status
  debug:
    msg: "k3s.yaml exists: {{ k3s_yaml.stat.exists }}"

- name: Copy Kubernetes manifests to remote host
  copy:
    src: "{{ playbook_dir }}/../kubernetes/"
    dest: "/tmp/kubernetes/"

- name: Création volume
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    src: "/tmp/kubernetes/persistent-volume.yml"
    namespace: "{{ app_name }}"
  become: yes

- name: Déploiement API
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    src: "/tmp/kubernetes/api-deployment.yml"
    namespace: "{{ app_name }}"
  become: yes

- name: Déploiement Frontend
  kubernetes.core.k8s:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    state: present
    src: "/tmp/kubernetes/frontend-deployment.yml"
    namespace: "{{ app_name }}"
  become: yes

# Skip the wait task if there are kubeconfig issues
- name: Vérification status PVC avec kubectl
  shell: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get pvc app-data-pvc -n {{ app_name }} -o jsonpath="{.status.phase}"
  register: pvc_status
  become: yes
  ignore_errors: yes

- name: Display PVC status
  debug:
    var: pvc_status.stdout
  ignore_errors: yes

- name: Vérification des déploiements avec kubectl
  shell: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get deployments -n {{ app_name }}
  register: deployment_status
  become: yes
  ignore_errors: yes

- name: Display deployment status
  debug:
    var: deployment_status.stdout_lines
  ignore_errors: yes